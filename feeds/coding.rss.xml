<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Kevin Stone - Coding</title><link>https://blog.kevinastone.com/</link><description></description><lastBuildDate>Mon, 12 Oct 2015 00:00:00 -0700</lastBuildDate><item><title>Generate Your Tests</title><link>https://blog.kevinastone.com/generate-your-tests.html</link><description>&lt;p&gt;When testing your application, you'll often come across the need to test that
your application behaves correct across a range of inputs or conditions.
Instead of repetitively defining the same test scaffolding, let's use some
meta-programming to build our tests methods from a list of parameters.
&lt;a href="https://nose.readthedocs.org/en/latest/"&gt;Nose&lt;/a&gt; has support for …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Stone</dc:creator><pubDate>Mon, 12 Oct 2015 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:blog.kevinastone.com,2015-10-12:/generate-your-tests.html</guid><category>Python</category></item><item><title>Django Model Descriptors</title><link>https://blog.kevinastone.com/django-model-descriptors.html</link><description>&lt;p&gt;How we can use Python Descriptors to create enhanced Django model fields that better encapsulate their functionality.  This will help keep our code more modular and reusable and well as cleaner and more maintainable.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Stone</dc:creator><pubDate>Wed, 26 Nov 2014 00:00:00 -0800</pubDate><guid isPermaLink="false">tag:blog.kevinastone.com,2014-11-26:/django-model-descriptors.html</guid><category>Django</category><category>Python</category></item><item><title>ElasticSearch Bliss with ElasticUtils</title><link>https://blog.kevinastone.com/elasticsearch-bliss-with-elasticutils.html</link><description>&lt;p&gt;While &lt;a href="http://haystacksearch.org"&gt;Django Haystack&lt;/a&gt; remains the go to recommendation for adding simple search indexing to your Django sites, you can quickly outgrow the simplified "bag of text" data model that haystack attempts to unify the various supported indexing engines.  Depending on your use case, you eventually need to customize the tokenizers …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Stone</dc:creator><pubDate>Mon, 30 Dec 2013 00:00:00 -0800</pubDate><guid isPermaLink="false">tag:blog.kevinastone.com,2013-12-30:/elasticsearch-bliss-with-elasticutils.html</guid><category>Django</category><category>Python</category><category>ElasticSearch</category></item><item><title>Getting Started with Django Rest Framework and AngularJS</title><link>https://blog.kevinastone.com/getting-started-with-django-rest-framework-and-angularjs.html</link><description>&lt;p&gt;A &lt;a href="http://en.wikipedia.org/wiki/Representational_state_transfer" title="Representational State Transfer"&gt;ReSTful API&lt;/a&gt; is becoming a standard component of any modern web application.  The &lt;a href="http://django-rest-framework.org" title="Django Rest Framework"&gt;Django Rest Framework&lt;/a&gt; is powerful framework for developing ReST endpoints for your Django based project.  &lt;a href="http://angularjs.org" title="Angular JS"&gt;AngularJS&lt;/a&gt; is modern javascript framework for creating complex web applications within the browser.  It focuses on strong separation of concerns (MVC …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Stone</dc:creator><pubDate>Wed, 02 Oct 2013 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:blog.kevinastone.com,2013-10-02:/getting-started-with-django-rest-framework-and-angularjs.html</guid><category>Django</category><category>Python</category><category>AngularJS</category><category>ReST</category></item><item><title>Batteries Included Django</title><link>https://blog.kevinastone.com/batteries-included-django.html</link><description>&lt;p&gt;A key benefit to using Python and/or Django for your next project, is the wealth of high quality 3rd party libraries that can help accelerate your development.  Python has a rich ecosystem of 3rd party libraries including often offical bindings for an external service.  This offers you significant tools to building rich, complex systems based on the available open source solutions.  Django's popularity and architecture provides the opportuntiy to find many existing solutions to common problems.  For education and discussion, I thought it would be helpful to enumerate the many libraries we currently use on Subblime to leverage the power of of the Python/Django ecosystem.  A what's in our toolbox sort of post.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Stone</dc:creator><pubDate>Tue, 16 Jul 2013 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:blog.kevinastone.com,2013-07-16:/batteries-included-django.html</guid><category>Django</category><category>Python</category><category>Subblime</category></item><item><title>Django Model Behaviors</title><link>https://blog.kevinastone.com/django-model-behaviors.html</link><description>&lt;p&gt;How do we manage the growing complexity of our Django models?  Leverage the behavior pattern to keep them compartmentalized into discrete reusable functionality.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Stone</dc:creator><pubDate>Sun, 12 May 2013 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:blog.kevinastone.com,2013-05-12:/django-model-behaviors.html</guid><category>Django</category><category>Python</category></item></channel></rss>